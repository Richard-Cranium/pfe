#ifndef PFE_FACILITY_EXT_H
#define PFE_FACILITY_EXT_H 20091024
/* generated by make-header.py from ../../c/facility-ext.c */

#include <pfe/pfe-ext.h>

/**
 * FACILITY --- The Optional Facility Word Set
 *
 *  Copyright (C) Tektronix, Inc. 1998 - 2001.
 *  Copyright (C) 2005 - 2008 Guido U. Draheim <guidod@gmx.de>
 *
 *  @see     GNU LGPL
 *  @author  Guido U. Draheim            (modified by $Author: guidod $)
 *  @version $Revision: 514 $
 *     (modified $Date: 2009-10-22 16:18:28 +0200 (Do, 22. Okt 2009) $)
 *
 *  @description
 *      There are the following primitive words for input and output:
 *
 *      => KEY waits for a character typed on the keyboard and returns
 *      that character, but => KEY does not return non-character
 *      input events like function keys pressed - use => EKEY for
 *      a more complete keyboard query.
 *      Furthermore, => KEY? returns true if a key is available for
 *      reading using => KEY (function key presses are not detected
 *      but discarded).
 *
 *      => EMIT will display the character at the current cursor
 *      position, control characters take effect depending on the
 *      system. => TYPE displays all the chars in the given string
 *      buffer.
 *
 *      To get the current cursor position, use =>'AT-XY'.
 */

#ifdef __cplusplus
extern "C" {
#endif




/** AT-XY ( col# row# -- ) [ANS]
 * move the cursor position to the given row and column
 * of the screen. If the output device is not a terminal
 * this will have no effect but can still send an
 * escape sequence.
 */
extern void FXCode (p4_at_x_y);

/** KEY? ( -- key-flag ) [ANS]
 * if a character is available from the keyboard, return true.
 * The => KEY word will retrieve the actual character.
 */
extern void FXCode (p4_key_question);

/** EKEY ( -- key-code# ) [ANS]
 * return a keyboard event, the encoding may differ, esp.
 * that it can contain special keys.
 */
extern void FXCode (p4_ekey);

/** EKEY>CHAR ( key-code# -- key-code# 0 | char# true! ) [ANS]
 */
extern void FXCode (p4_ekey_to_char);

/** EKEY? ( -- ekey-flag ) [ANS]
 * check if a character is available from the keyboard
 * to be received - unlike => KEY? it will not discard
 * non-visible codes.
 */
extern void FXCode (p4_ekey_question);

/** EMIT? ( -- emit-flag ) [ANS]
 * if => EMIT can safely output characters without
 * blocking the forth by waiting for an indefinite time.
 */
extern void FXCode (p4_emit_question);

/** MS ( milliseconds# -- ) [ANS]
 * wait at least the specified milliseconds
 * (suspend the forth tasklet)
 */
extern void FXCode (p4_ms);

/** TIME&amp;DATE ( -- sec# min# hrs# day# month# year# ) [ANS]
 * return the broken down current time
 */
extern void FXCode (p4_time_and_date);

extern void FXCode_RT (p4_add_field_RT);

/** +FIELD ( n1 n2 "name" -- n3 )
 * Skip leading space delimiters. Parse name delimited by a space.
 * Create a definition for name with the execution semantics defined
 * below. Return n3=n1+n2 where n1 is the offset in the data
 * structure before +FIELD executes, and n2 is the size of the data
 * to be added to the data structure. N1 and n2 are in address units.
 *
 * Execution ( addr -- addr+n1 )
 * Add n1 from the execution of +FIELD above to addr.
 */
extern void FXCode (p4_add_field);

/** BEGIN-STRUCTURE ( "name" -- struct-sys 0 )
 * Skip leading space delimiters. Parse name delimited by a space.
 * Create a definition for name with the execution semantics defined
 * below. Return a struct-sys (zero or more implementation dependent
 * items) that will be used by => END-STRUCTURE and an initial offset of 0.
 *
 * Execution: ( -- +n )
 * +n is the size in memory expressed in adress units of the data
 * structure.
 *
 * Ambiguous conditions:
 * If name is executed before the closing => END-STRUCTURE has been
 * executed.
 *
 * Implentation is like
 * start a structure definition
 : BEGIN-STRUCTURE CREATE !CSP
   HERE
   0 DUP ,
 DOES>
   CREATE @ ALLOT
 ;
 */
extern void FXCode_RT (p4_begin_structure_RT);

extern void FXCode (p4_begin_structure);

/** END-STRUCTURE ( struct-sys +n -- )
 * Terminate definition of a structure started by => BEGIN-STRUCTURE
 * This will finalize a previously started => BEGIN-STRUCTURE definition
 : ENDSTRUCTURE  SWAP !  ?CSP ;
 */
extern void FXCode (p4_end_structure);

/** CFIELD: ( struct-sys offset "name" -- struct-sys offset+x )
 * The semantics of CFIELD: are identical to the execution
 * semantics of the phrase
  1 CHARS +FIELD
 */
extern void FXCode (p4_c_field_colon);

/** FIELD: ( struct-sys offset "name" -- struct-sys offset+x )
 * The semantics of FIELD: are identical to the execution
 * semantics of the phrase
  ALIGNED  1 CELLS +FIELD
 */
extern void FXCode (p4_u_field_colon);

/** SFFIELD:  ( struct-sys offset "name" -- struct-sys offset+x )
 * The semantics of SFFIELD: are identical to the execution
 * semantics of the phrase
  SFALIGNED  1 SFLOATS +FIELD
 */
extern void FXCode (p4_sf_field_colon);

/** DFFIELD: ( struct-sys offset "name" -- struct-sys offset+x )
 * The semantics of DFFIELD: are identical to the execution
 * semantics of the phrase
  DFALIGNED  1 DFLOATS +FIELD
 * see => DFFIELD:
 */
extern void FXCode (p4_df_field_colon);

#ifdef __cplusplus
} /* extern "C" */
#endif


#endif

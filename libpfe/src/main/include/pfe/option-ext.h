#ifndef PFE_OPTION_EXT_H
#define PFE_OPTION_EXT_H 20091024
/* generated by make-header.py from ../../c/option-ext.c */

#include <pfe/pfe-ext.h>

/**
 * -- Almost-Non-Volatile Environment Options
 *
 *  Copyright (C) Tektronix, Inc. 2001 - 2001.
 *  Copyright (C) 2005 - 2008 Guido U. Draheim <guidod@gmx.de>
 *
 *  @see     GNU LGPL
 *  @author  Guido U. Draheim            (modified by $Author: guidod $)
 *  @version $Revision: 514 $
 *     (modified $Date: 2009-10-22 16:18:28 +0200 (Do, 22. Okt 2009) $)
 *
 *  @description
 *       the openfirmware standard specifies some means to add
 *       options to a non-volatile ram-area (nvram) that are used
 *       in the bootup sequence of the forth-based bootsystem.
 *       Here we add an internal API for looking for bootup options,
 *       an internal API to add bootup options through commandline
 *       processing, and an external API to change the bootup options
 *       for a => COLD reboot or an => APPLICATION specific sequence.
 *       The external API will try to follow openfirmware as closely
 *       as possible without having a real non-volatile ram-area.
 *       Instead there is a session-struct that can be changed and
 *       from which multiple forth-threads can be instantiated
 *       later using those options. The forth-instantion processing
 *       is not supposed to scan for commandline options, which is
 *       a mere necessity in embedded enviroments where option
 *       transferal is done in a completly different way and where
 *       the forth thread is never killed but just stopped or
 *       restarted for various reasons. Even that there is no real
 *       nvram we add a cold-options reboot-area in this wordset.
 *       The option-ram is organized just along a normal dictionary
 *       just need to add a wordlist-handlestruct to find the
 *       definitions in this dictlike ram-portion.
 */

#ifdef __cplusplus
extern "C" {
#endif


typedef p4_Session p4_Options;
#define p4_get_option_value  p4_search_option_value
#define p4_get_option_string p4_search_option_string


extern void FXCode_RT (p4_string_RT);

/** NVRAM,WORDS ( -- )
 *
 * Print a list of => WORDS in the NVRAM buffer. Try to show also the
 * current value, atleast for NVRAM numbers and strings. Words can be
 * added or changed with the help of => NVRAM,SET or => NVRAM,USE
 *
 * Values in the NVRAM buffer will survive a => COLD reboot, in many
 * hosted environments however the NVRAM will be lost on program exit.
 */
extern void FXCode (p4_nvram_words);

/** NVRAM,AS ( str-ptr str-len "varname" -- )
 * set the NVRAM variable to the specified string.
 *
 * Some NVRAM strings do not take effect until next => COLD reboot.
 */
extern void FXCode (p4_nvram_as);

/** NVRAM,TO ( number "varname" -- )
 * set the NVRAM variable to the specified number.
 *
 * Most NVRAM numbers do not take effect until next => COLD reboot.
 */
extern void FXCode (p4_nvram_to);

/** NVRAM,Z@ ( "varname" -- z-str )
 *
 * Return the string pointer of the NVRAM string item, or null if no
 * such item exists.
 */
extern void FXCode (p4_nvram_z_fetch);

/** NVRAM,S@ ( "varname" -- str-ptr str-len )
 *
 * Return the string span of the NVRAM string item, or double null if no
 * such item exists.
 */
extern void FXCode (p4_nvram_s_fetch);

/** NVRAM,?@ ( number "varname" -- number' )
 *
 * Return the value of the NVRAM value item, or leave the original
 * number untouched (i.e. the default value for your option).
 */
extern void FXCode (p4_nvram_Q_fetch);

/**
 * returns the CFA of the option if found
 *
 * Since this routine is sometimes run in problematic conditions,
 * during interrupt service handlers, before the pfe thread is
 * allocated, some other boot routines did nasty things with just
 * no catch frame around yet. We try to guard that with checking
 * the entries to be part of the OPT assigned space, anything
 * else is considered wrong and returns null.
 */
extern p4xt p4_search_option (const p4char* nm, int l, p4_Options* opt); /*{*/

/**
 * look for string_RT options, free the malloc'ed string buffer,
 * and put a two_constant_RT in the execution token area. For a
 * limited time the mem space (originally referenced) will keep
 * the string until that area gets reallocated to another part.
 * However, this function is normally called _after_ pfeVM shutdown
 * and it is unlikely that (a) the memspace is realloc'ed and that
 * (b) the string value is used actually in some pfe context therefore.
 */
extern void p4_invalidate_string_options (p4_Options* opt); /*{*/

/**
 * create a new header in the option-dict and return
 * the xt. Unlike other header-creations, here we never
 * smudge the name, and the caller is responsible to
 * setup the value of the CFA. If no header could be
 * created then the function will return null - check for that!
 */
extern p4xt p4_create_option (const p4char* name, int len, int size, p4_Options* opt); /*{*/

/**
 * search the option value in the option-ram, if nothing
 * is found then return the argument default. The option-ram
 * is not changed.
 * (in posixish os: lookup also PFE_<OPTIONNAME> environment variable)
 */
extern p4celll p4_search_option_value (const p4char* nm, int l, p4celll defval, p4_Options* opt); /*{*/

/**
 * return the value of an option that is already in the
 * option-ram. If no option is found, add the default we
 * give as an argument, and return this parameter as the result.
 */
extern p4cell* p4_create_option_value (const p4char* nm, int l, p4celll defval, p4_Options* opt); /*{*/

/**
 * change the value of an option that is already in the
 * option-ram. If no option-var is found, create that option
 * and set the var to the argument value. Return the address
 * to the value, or null if the option-ram is filled up.
 */
extern p4cell* p4_change_option_value (const p4char* nm, int l, p4celll defval, p4_Options* opt); /*{*/

/**
 * search the option value in the option-ram, if nothing
 * is found then return the argument default. The option-ram
 * is not changed.
 */
extern const p4_char_t* p4_search_option_string (const p4char* nm, int l, const char* defval, p4_Options* opt); /*{*/

/**
 * search the option value in the option-ram, if nothing
 * is found then return the argument default. The option-ram
 * is not changed. This one uses an indirect reference!
 */
extern const char** p4_lookup_option_string (const p4char* nm, int l, const char** defval, p4_Options* opt); /*{*/

/**
 * return the address of the value of an option string that is already
 * in the option-ram. If no option is found, add the default we
 * give as an argument. The string is zero-terminated (!!)
 */
extern const char** p4_create_option_string (const p4char* nm, int l, const char* defval, p4_Options* opt); /*{*/

/**
 * change the value of an option that is already in the
 * option-ram. If no option var is found, create that var
 * and set it to the argument string. The string is
 * zero-terminated. The return is the address of the
 * allocated string or zero if no option-var could be created.
 */
extern const char** p4_change_option_string (const p4char* nm, int l, const char* defval, p4_Options* opt); /*{*/

/**
 * change the value of an option that is already in the
 * option-ram. If no option var is found, create that var
 * and set it to the argument string. The string is
 * zero-terminated. The return is the address of the
 * string pointer or zero if no option-var could be created.
 *
 * If there had been an option then append the value
 * given. If that string was not empty then insert a
 * delimiter string in between the old and new value.
 * Nice to build path string options. The mechanism
 * automatically knows how to realloc the option string
 * buffer so that the whole path fits.
 */
extern const char** p4_append_option_string (const p4char* nm, int l, char delimiter, const char* defval, p4_Options* opt); /*{*/

/**
 * a string shall be converted into a cell that should flag the
 * size of something like the dictionary or stack. The second
 * argument gives an idea about the default if no size-specifier
 * has been provided. This routine does match the arg-option
 * processing of gforth - had an e-mail exchange with anton ertl
 * about this. Does return null on any errors.
 */
extern p4ucell p4_convsize (const char* s, p4ucell elemsize); /*{*/

#ifdef __cplusplus
} /* extern "C" */
#endif


#endif

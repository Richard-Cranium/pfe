#ifndef PFE_HEADER_SUB_H
#define PFE_HEADER_SUB_H 20091024
/* generated by make-header.py from ../../c/header-sub.c */

#include <pfe/pfe-sub.h>

/**
 *  Implements header creation and navigation.
 *
 *  Copyright (C) Tektronix, Inc. 1998 - 2001.
 *  Copyright (C) 2005 - 2008 Guido U. Draheim <guidod@gmx.de>
 *
 *  @see     GNU LGPL
 *  @author  Guido U. Draheim            (modified by $Author: guidod $)
 *  @version $Revision: 514 $
 *     (modified $Date: 2009-10-22 16:18:28 +0200 (Do, 22 Okt 2009) $)
 */

#ifdef __cplusplus
extern "C" {
#endif


/* you must differentiate between VAR-style body and DOES-style body */
# define P4_TO_LINK(C)     ((p4char**)(C) -1 )
# define P4_LINK_FROM(C)   ((p4xt)(C) + 1 )
# define P4_TO_BODY(C)     ((p4cell *)((p4xt)(C) + 1))
# define P4_BODY_FROM(P)   ((p4xt)((p4cell *)(P) - 1))
# define P4_TO_DOES_BODY(C)  ((p4cell *)((p4xt)(C) + 2))
# define P4_TO_DOES_CODE(C)  ((p4xcode **)((p4xt)(C) + 1))
# ifdef PFE_CALL_THREADING
extern const p4xcode* p4_to_code (p4xt xt);
# define P4_TO_CODE(C)     (p4_to_code((p4xt)C))
# else
# define P4_TO_CODE(C)     (C)
# endif


/**
 * (DICTVAR) forth-thread variable runtime, => VARIABLE like
 */
extern void FXCode_RT (p4_dictvar_RT);

/**
 * (DICTGET) forth-thread constget runtime, => VALUE like
 */
extern void FXCode_RT (p4_dictget_RT);

/**
 * make a new dictionary entry in the word list identified by wid
 *                   ( TODO: delete the externs in other code portions)
 * This function is really ifdef'd a lot because every implementation
 * needs to be (a) fast because it is used heavily when loading a forth
 * script and (b) robust to bad names like non-ascii characters and (c)
 * each variant has restrictions on header field alignments.
 *
 */
extern p4_namebuf_t* p4_header_comma (const p4_namechar_t *name, int len, p4_Wordl *wid); /*{*/

/** create a header in the given wordlist - see $HEADER */
extern p4_namebuf_t* p4_make_header (p4code cfa, char flags, const p4_namechar_t* name, int count, p4_Wordl* wid); /*{*/

/** create a header - see $HEADER */
extern p4_namebuf_t* p4_header (p4code cfa, char flags); /*{*/

/** create a header - see HEADER */
extern p4_namebuf_t* p4_header_in (p4_Wordl* wid); /*{*/

/** >BODY is known to work on both DOES-style and VAR-style words
 * and it will even return the thread-local address of remote-style words
 * (DOES-style words are <BUILDS CREATE and DEFER in ans-forth-mode)
 */
extern p4cell * p4_to_body (p4xt xt); /*{*/

/** BODY>
 */
extern p4xt p4_body_from (p4cell* body); /*{*/

/** NAME>LINK
 */
extern p4_namebuf_t** p4_name_to_link (const p4_namebuf_t* p); /*{*/

/** LINK>NAME
 * scan backward for count byte preceeding name of definition
 * returns pointer to count byte of name field or NULL
 */
extern p4_namebuf_t * p4_link_to_name (p4_namebuf_t **l); /*{*/

/** >SEMANT
 */
extern p4_Semant * p4_to_semant (p4xt xt); /*{*/

/** >LINK
 */
extern p4_namebuf_t ** p4_to_link (p4xt xt); /*{*/

/** NAME> ( nfa* -- xt* )
 * it has one special trick in that it can see a SYNONYM
 * runtime and dereference it immediately. Thus only the
 * target is being compiled/executed. If you need to know
 * the actual SYNONYM DEFER then you must use the sequence
 * N>LINK LINK> to get to the execution token of a word.
 */
extern p4xt p4_name_from (const p4_namebuf_t *p); /*{*/

/** check-deprecated ( nfa* -- )
 * This is a longer a variant of NAME> which does also know
 * about OBSOLETED words. It is used in the p4_tick in the
 * outer interpreter as well as some other words that do
 * compiling.
 */
extern void p4_check_deprecated (p4_namebuf_t* nfa); /*{*/

/** >NAME
 */
extern p4_namebuf_t * p4_to_name (p4xt c); /*{*/

/** .NAME
 */
extern void p4_dot_name (const p4_namebuf_t *nfa); /*{*/

#ifdef __cplusplus
} /* extern "C" */
#endif


#endif
